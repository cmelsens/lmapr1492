{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b5f7032a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pymatgen.ext.matproj import MPRester\n",
    "with MPRester(\"kVModF0coZpRa7Ku\") as m:\n",
    "\n",
    "    # Structure for material id\n",
    "    structure = m.get_structure_by_material_id(\"mp-961678\")\n",
    "\n",
    "    # Dos for material id\n",
    "    dos = m.get_dos_by_material_id(\"mp-961678\")\n",
    "\n",
    "    # Bandstructure for material id\n",
    "    bandstructure = m.get_bandstructure_by_material_id(\"mp-961678\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ea17e921",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nfrom pymatgen.ext.matproj import MPRester\\nfrom pymatgen.apps.borg.hive import VaspToComputedEntryDrone\\nfrom pymatgen.apps.borg.queen import BorgQueen\\nfrom pymatgen.entries.compatibility import MaterialsProjectCompatibility\\nfrom pymatgen.analysis.phase_diagram import PhaseDiagram, PDPlotter\\n\\n# Assimilate VASP calculations into ComputedEntry object. Let\\'s assume that\\n# the calculations are for a series of new LixFeyOz phases that we want to\\n# know the phase stability.\\ndrone = VaspToComputedEntryDrone()\\nqueen = BorgQueen(drone, rootpath=\".\")\\nentries = queen.get_data()\\n\\n# Obtain all existing Li-Fe-O phases using the Materials Project REST API\\nwith MPRester(\"kVModF0coZpRa7Ku\") as m:\\n    mp_entries = m.get_entries_in_chemsys([\"Sc\", \"Co\", \"Te\"])\\n\\n# Combined entry from calculated run with Materials Project entries\\nentries.extend(mp_entries)\\n\\n# Process entries using the MaterialsProjectCompatibility\\ncompat = MaterialsProjectCompatibility()\\nentries = compat.process_entries(entries)\\n\\n# Generate and plot Li-Fe-O phase diagram\\npd = PhaseDiagram(entries)\\nplotter = PDPlotter(pd)\\nplotter.show()\\n'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "from pymatgen.ext.matproj import MPRester\n",
    "from pymatgen.apps.borg.hive import VaspToComputedEntryDrone\n",
    "from pymatgen.apps.borg.queen import BorgQueen\n",
    "from pymatgen.entries.compatibility import MaterialsProjectCompatibility\n",
    "from pymatgen.analysis.phase_diagram import PhaseDiagram, PDPlotter\n",
    "\n",
    "# Assimilate VASP calculations into ComputedEntry object. Let's assume that\n",
    "# the calculations are for a series of new LixFeyOz phases that we want to\n",
    "# know the phase stability.\n",
    "drone = VaspToComputedEntryDrone()\n",
    "queen = BorgQueen(drone, rootpath=\".\")\n",
    "entries = queen.get_data()\n",
    "\n",
    "# Obtain all existing Li-Fe-O phases using the Materials Project REST API\n",
    "with MPRester(\"kVModF0coZpRa7Ku\") as m:\n",
    "    mp_entries = m.get_entries_in_chemsys([\"Sc\", \"Co\", \"Te\"])\n",
    "\n",
    "# Combined entry from calculated run with Materials Project entries\n",
    "entries.extend(mp_entries)\n",
    "\n",
    "# Process entries using the MaterialsProjectCompatibility\n",
    "compat = MaterialsProjectCompatibility()\n",
    "entries = compat.process_entries(entries)\n",
    "\n",
    "# Generate and plot Li-Fe-O phase diagram\n",
    "pd = PhaseDiagram(entries)\n",
    "plotter = PDPlotter(pd)\n",
    "plotter.show()\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "efd9a667",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
